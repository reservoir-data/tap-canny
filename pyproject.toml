[project]
name = "tap-canny"
version = "0.0.1"
description = "`tap-canny` is a Singer tap for Canny, built with the Meltano SDK for Singer Taps."
readme = "README.md"
keywords = [
  "Canny",
  "ELT",
  "singer.io",
]
license = "Apache-2.0"
maintainers = [{ name = "Edgar Ramírez-Mondragón", email = "edgarrm358@gmail.com" }]
authors = [{ name = "Edgar Ramírez-Mondragón", email = "edgarrm358@gmail.com" }]
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  'pendulum~=3.0.0b1; python_version >= "3.12"',
  "requests",
  "singer-sdk~=0.34.0",
]
[project.optional-dependencies]
testing = [
  "deptry",
  "pytest~=7.4",
  "singer-sdk[testing]~=0.34.0",
]
typing = [
  "mypy",
  "types-requests",
]
[project.urls]
Documentation = "https://github.com/edgarrmondragon/tap-canny#readme"
Homepage = "https://github.com/edgarrmondragon/tap-canny"
Source = "https://github.com/edgarrmondragon/tap-canny"
[project.scripts]
"tap-canny" = "tap_canny.tap:TapCanny.cli"

[tool.hatch.envs.sync.scripts]
jsonl = "tap-canny {args:tests} > tap-canny.jsonl"

[tool.hatch.envs.test]
features = ["testing"]
[tool.hatch.envs.test.scripts]
integration = "pytest {args:tests}"
dependencies = "deptry ."

[tool.hatch.envs.typing]
features = ["testing", "typing"]
[tool.hatch.envs.typing.scripts]
check = "mypy --strict {args:tap_canny tests}"

[tool.pytest.ini_options]
addopts = "-vvv"

[tool.mypy]
python_version = "3.11"
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["backoff.*"]

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[tool.ruff]
line-length = 88
src = ["tap_canny", "tests"]
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "ANN101", # missing-type-self
  "DJ", # flake8-django
  "COM812",  # missing-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = ["ANN"]
"tests/*" = [
  "ANN201", # missing-return-type-public-function
  "S101", # assert
  "SLF001", # private-member-access
]

[tool.ruff.lint.isort]
known-first-party = ["tap_canny"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.deptry.package_module_name_map]
mypy = "mypy"
types-requests = "types_requests"

[tool.deptry.per_rule_ignores]
DEP002 = [
  "deptry",
  "mypy",
  "pendulum",
  "pytest",
  "types-requests",
]
